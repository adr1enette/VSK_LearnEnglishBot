# Standard libraries
import os
import re
import sqlite3
import time
import random
from datetime import datetime

# External libraries
import requests
import telebot
from prettytable import PrettyTable


with open("token.txt", "r") as token_file:
    TOKEN = token_file.read().strip()

bot = telebot.TeleBot(TOKEN)

def create_database_if_not_exists():
    if not os.path.exists('bot.db'):
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()

        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER NOT NULL,
                            start_time TEXT NOT NULL,
                            username TEXT,
                            first_name TEXT,
                            last_name TEXT,
                            language_code TEXT,
                            is_premium BOOLEAN NOT NULL
                        )''')
        
        conn.commit()
        conn.close()

create_database_if_not_exists()

def get_db_connection():
    conn = sqlite3.connect('bot.db')
    return conn, conn.cursor()


# /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    conn, cursor = get_db_connection()

    cursor.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if not user:
        start_time = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        language_code = message.from_user.language_code
        is_premium = message.from_user.is_premium
        cursor.execute("INSERT INTO users (user_id, start_time, username, first_name, last_name, language_code, is_premium) VALUES (?, ?, ?, ?, ?, ?, ?)",
                       (message.from_user.id, start_time, username, first_name, last_name, language_code, is_premium))
        conn.commit()
        
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        
        print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({message.from_user.id}), –Ω–∞—á–∞–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ {start_time}. " \
              f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")

    conn.close()

    intro_message = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∏ —É–ª—É—á—à–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üòä"
    bot.send_message(message.chat.id, intro_message)
    
    time.sleep(3)
    
    handle_main_menu(message)


# /main
@bot.message_handler(commands=['main'])
def handle_main_menu(message):
    main_menu_message = "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n" \
                        "- /add book - –∫–Ω–∏–≥–∞ (–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ)\n" \
                        "- /delete book (—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ –ø–æ–ø—Ä–æ—â–µ /delete index)\n" \
                        "- /words (—Ç–≤–æ–π –Ω–∞–∫–æ–ø–∏–≤—à–µ–π—Å—è —Å–ª–æ–≤–∞—Ä—å)\n" \
                        "- /test (—Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–±—è)\n" \
                        "- /check (–ø—Ä–æ–≤–µ—Ä—å —Å–µ–±—è!)\n" \
                        "- /define hello (—Ñ–æ–Ω–µ—Ç–∏–∫–∞, –∞—É–¥–∏–æ, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ)\n" \
                        "- /help (–µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã üòÖ)"
    bot.send_message(message.chat.id, main_menu_message)


# /help
@bot.message_handler(commands=['help'])
def handle_help(message):
    help_message = """
    –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∏ —É–ª—É—á—à–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üòä

    **–ö–æ–º–∞–Ω–¥—ã:**

    - `/add` - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞: –¥–æ–±–∞–≤–ª—è–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –∏—Ö —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å.
    - `/delete` - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞: —É–¥–∞–ª—è–π —Å–ª–æ–≤–∞ –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —Å–ª–æ–≤—É –∏–ª–∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å—É.
    - `/words` - —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤: –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ —Å–≤–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ.
    - `/test` - —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–±—è: –ø–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    - `/check` - –ø—Ä–æ–≤–µ—Ä—å —Å–µ–±—è!: –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏.
    - `/define` - –±–æ–ª—å—à–µ –æ —Å–ª–æ–≤–µ: —É–∑–Ω–∞–≤–∞–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –∞–Ω—Ç–æ–Ω–∏–º—ã —Å–ª–æ–≤–∞.
    - `/help` - –ø–æ–º–æ—â—å —Å –æ–±—É—á–µ–Ω–∏–µ–º: –ø–æ–ª—É—á–∞–π —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.

    **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/help`, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ –∏ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.

    **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):**

    1. **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å?**
       –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/add`, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Å–ª–µ–¥—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∑–∞—Ç–µ–º —Ç–∏—Ä–µ –∏ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä:
       `/add book - –∫–Ω–∏–≥–∞`

    2. **–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è?**
       –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/delete`, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Å–ª–µ–¥—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ. –ù–∞–ø—Ä–∏–º–µ—Ä:
       `/delete book`

    3. **–ö–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ –º–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ?**
       –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/words`.

    4. **–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?**
       –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!

    **–°–æ–≤–µ—Ç—ã –Ω–∞ –±—É–¥—É—â–µ–µ:**

    - –ù–µ –∑–∞–±—ã–≤–∞–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å!
    - –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/help`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏.
    - –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!
    """
    bot.send_message(message.chat.id, help_message, parse_mode='Markdown')


# /add
@bot.message_handler(commands=['add'])
def handle_add_word_text(message):
    if len(message.text.split()) == 1:
        example_message = "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add, " \
                          "–∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Å–ª–µ–¥—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∑–∞—Ç–µ–º —Ç–∏—Ä–µ –∏ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n" \
                          "/add book - –∫–Ω–∏–≥–∞"
        bot.send_message(message.chat.id, example_message)
        return
    
    lines = message.text.strip().split("\n")
    
    added_words = []
    
    for line in lines:
        line = line.replace("/add", "").strip()
        
        if not re.match(r'^[a-zA-Z]+\s*-\s*[–∞-—è–ê-–Ø]+$', line):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: Eng - Rus\n–ü—Ä–∏–º–µ—Ä: `/add book - –∫–Ω–∏–≥–∞`", parse_mode='Markdown')
            continue

        english_word, russian_word = map(str.strip, line.split("-", 1))

        english_word = english_word.lower()
        russian_word = russian_word.lower()

        conn, cursor = get_db_connection()

        try:
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (f"user_{message.from_user.id}",))
            table_exists = cursor.fetchone()
            if not table_exists:
                cursor.execute(f'''CREATE TABLE IF NOT EXISTS user_{message.from_user.id} (
                                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                                    english_word TEXT NOT NULL,
                                    russian_word TEXT NOT NULL
                                )''')
                conn.commit()
                print(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ user_{message.from_user.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}).")

            cursor.execute(f"SELECT * FROM user_{message.from_user.id} WHERE english_word=?", (english_word,))
            existing_word = cursor.fetchone()
            if existing_word:
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{english_word}' —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ. " \
                                                   f"–ï–≥–æ –ø–µ—Ä–µ–≤–æ–¥: '{existing_word[2]}'.")
                continue

            cursor.execute(f"INSERT INTO user_{message.from_user.id} (english_word, russian_word) VALUES (?, ?)", (english_word, russian_word))
            conn.commit()

            added_words.append(english_word)
        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ SQLite: {e}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        finally:
            conn.close()

    if added_words:
        if len(added_words) == 1:
            success_message = f"–°–ª–æ–≤–æ '{added_words[0]}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å."
        else:
            success_message = f"–°–ª–æ–≤–∞ '{', '.join(added_words)}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å."
        bot.send_message(message.chat.id, success_message)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username} ({message.from_user.id}).")


# /delete
@bot.message_handler(commands=['delete'])
def handle_delete_word_text(message):
    if len(message.text.split()) == 1:
        example_message = "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Å–ª–µ–¥—É–µ—Ç " \
                          "–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n" \
                          "`/delete book`\n" \
                          "`/delete 5`"
        bot.send_message(message.chat.id, example_message, parse_mode='Markdown')
        return

    word_or_index = message.text.strip().replace("/delete", "").strip().strip("'")

    word_or_index = word_or_index.lower()

    conn, cursor = get_db_connection()

    try:
        if re.match(r'^\d+$', word_or_index):
            word_index = int(word_or_index)

            cursor.execute(f"SELECT english_word FROM user_{message.from_user.id}")
            words = cursor.fetchall()

            if 0 < word_index <= len(words):
                word_to_delete = words[word_index - 1][0]
                delete_confirmation_message = f"–ñ–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{word_to_delete}'?\n" \
                                              f"–ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n" \
                                              f"`/delete {word_to_delete}`\n" \
                                              f"–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ - `/delete index`"
                bot.send_message(message.chat.id, delete_confirmation_message, parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ —Å –∏–Ω–¥–µ–∫—Å–æ–º {word_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É `/delete index`", parse_mode= 'Markdown')
        elif word_or_index.lower() == "index":
            show_words_table(message)
        else:
            word = word_or_index

            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (f"user_{message.from_user.id}",))
            table_exists = cursor.fetchone()
            if not table_exists:
                bot.send_message(message.chat.id, "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.")
                return

            cursor.execute(f"SELECT * FROM user_{message.from_user.id} WHERE LOWER(english_word)=?", (word,))
            existing_word = cursor.fetchone()
            if existing_word:
                cursor.execute(f"DELETE FROM user_{message.from_user.id} WHERE LOWER(english_word)=?", (word,))
                conn.commit()

                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")
            else:
                cursor.execute(f"SELECT * FROM user_{message.from_user.id} WHERE LOWER(russian_word)=?", (word,))
                russian_word_match = cursor.fetchone()
                if russian_word_match:
                    bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ, —á–µ–π –ø–µ—Ä–µ–≤–æ–¥ —è–≤–ª—è–µ—Ç—Å—è '{word}'.\n" \
                                                     "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ, –≤—Å–ø–æ–º–Ω–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ üòâ")
                else:
                    bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.",
                                     parse_mode='Markdown')
    finally:
        conn.close()

def show_words_table(message):
    conn, cursor = get_db_connection()

    try:
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (f"user_{message.from_user.id}",))
        table_exists = cursor.fetchone()
        if not table_exists:
            bot.send_message(message.chat.id, "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.")
            return

        cursor.execute(f"SELECT english_word FROM user_{message.from_user.id}")
        words = cursor.fetchall()

        table = PrettyTable(["–ò–Ω–¥–µ–∫—Å", "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ"])
        for i, word in enumerate(words, start=1):
            table.add_row([i, word[0]])

        table.align = "l"

        bot.send_message(message.chat.id, f"–¢–∞–±–ª–∏—Ü–∞ —Å–ª–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è:\n\n```\n{table}\n```", parse_mode='Markdown')
    finally:
        conn.close()


# /words
@bot.message_handler(commands=['words'])
def handle_words(message):
    conn, cursor = get_db_connection()

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (f"user_{message.from_user.id}",))
    table_exists = cursor.fetchone()
    if not table_exists:
        bot.send_message(message.chat.id, "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.")
        return

    cursor.execute(f"SELECT english_word, russian_word FROM user_{message.from_user.id}")
    words = cursor.fetchall()

    if words:
        table = PrettyTable(["–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ", "–†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ"])

        for word in words:
            table.add_row(word)

        table.align = "l"

        bot.send_message(message.chat.id, f"–°–ª–æ–≤–∞ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ:\n\n```\n{table}\n```", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.")

    conn.close()


# /test
@bot.message_handler(commands=['test'])
def handle_test_command(message):
    if len(message.text.split()) == 1:
        example_message = "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Å–ª–µ–¥—É–µ—Ç " \
                          "–æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: `en`, `ru` –∏–ª–∏ `random`.\n\n" \
                          "–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n" \
                          "`/test en` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞."
        bot.send_message(message.chat.id, example_message, parse_mode='Markdown')
        return

    conn, cursor = get_db_connection()

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (f"user_{message.from_user.id}",))
    table_exists = cursor.fetchone()
    if not table_exists:
        bot.send_message(message.chat.id, "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.")
        return

    cursor.execute(f"SELECT english_word, russian_word FROM user_{message.from_user.id}")
    words = cursor.fetchall()

    if not words:
        bot.send_message(message.chat.id, "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.")
        return

    command_args = message.text.split()[1].lower()

    good_luck_message = "–£–¥–∞—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π! –í–æ—Ç –≤–∞—à–∏ —Å–ª–æ–≤–∞:\n\n"

    selected_words = []

    if command_args == "en":
        selected_words = random.sample(words, min(10, len(words)))
    elif command_args == "ru":
        selected_words = random.sample(words, min(10, len(words)))
    elif command_args == "random":
        selected_word = random.choice(words)
        selected_words.append(selected_word)
    else:
        example_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: `en`, `ru` –∏–ª–∏ `random`."
        bot.send_message(message.chat.id, example_message, parse_mode='Markdown')
        return

    test_message = good_luck_message

    if command_args == 'random':
        test_message += "`/check "
    else:
        test_message += "```text\n/check\n"
        
    for word_pair in selected_words:
        if command_args == "en":
            test_message += f"{word_pair[0]} -\n"
        elif command_args == "ru":
            test_message += f"{word_pair[1]} -\n"
        else:
            test_message += f"{word_pair[0]} -\n"
            
    if command_args == 'random':
        test_message += "`"
    else:
        test_message += "```\n"

    bot.send_message(message.chat.id, test_message, parse_mode= 'Markdown')


# /check
@bot.message_handler(commands=['check'])
def handle_check(message):
    if len(message.text.split()) == 1:
        example_message = "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—ã —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" \
                          "—Å–ª–æ–≤–æ1 - –ø–µ—Ä–µ–≤–æ–¥1\n—Å–ª–æ–≤–æ2 - –ø–µ—Ä–µ–≤–æ–¥2\n...\n\n" \
                          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test (en, ru, random) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        bot.send_message(message.chat.id, example_message)
        return

    conn, cursor = get_db_connection()

    lines = message.text.split('\n')
    
    lines = [line.replace('/check', '') for line in lines]
    
    score = 0
    total_words = 0
    
    for line in lines:
        pairs = re.findall(r'\b\w+\s*-\s*\w+\b', line)
        
        for pair in pairs:
            words = pair.split('-')
            
            words = [word.strip() for word in words]
            
            if words[0].isalpha() and words[0].isascii():
                # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ - –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ, –∏—â–µ–º –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                cursor.execute(f"SELECT russian_word FROM user_{message.from_user.id} WHERE english_word=?", (words[0],))
                translation = cursor.fetchone()

                if translation:
                    if translation[0] == words[1]:
                        score += 1
                    else:
                        bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ \'{words[0]}\' - \'{translation[0]}\'.")
                else:
                    bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω–æ! –°–ª–æ–≤–æ \'{words[0]}\' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.")
            else:
                cursor.execute(f"SELECT english_word FROM user_{message.from_user.id} WHERE russian_word=?", (words[0],))
                translation = cursor.fetchone()

                if translation:
                    if translation[0] == words[1]:
                        score += 1
                    else:
                        bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ \"{words[0]}\" - \"{translation[0]}\".")
                else:
                    bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω–æ! –°–ª–æ–≤–æ \"{words[0]}\" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.")

            total_words += 1

    conn.close()

    accuracy = score / total_words * 100 if total_words > 0 else 0

    bot.send_message(message.chat.id, f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ {total_words} –±–∞–ª–ª–æ–≤. ({accuracy:.2f}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)")
    
    
# /define
@bot.message_handler(commands=['define'])
def handle_define(message):
    arg = message.text.split()[1]

    if arg.isdigit():
        word_index = int(arg)

        conn, cursor = get_db_connection()

        try:
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (f"user_{message.from_user.id}",))
            table_exists = cursor.fetchone()

            if not table_exists:
                error_message = "–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤–∞—Ä—è. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add."
                bot.send_message(message.chat.id, error_message)
                return

            cursor.execute(f"SELECT COUNT(*) FROM user_{message.from_user.id}")
            words_count = cursor.fetchone()[0]
            if words_count == 0:
                error_message = "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add."
                bot.send_message(message.chat.id, error_message)
                return

            cursor.execute(f"SELECT english_word FROM user_{message.from_user.id} LIMIT 1 OFFSET {word_index}")
            row = cursor.fetchone()
            if row:
                word = row[0]
            else:
                error_message = f"–°–ª–æ–≤–æ —Å –∏–Ω–¥–µ–∫—Å–æ–º {word_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ."
                bot.send_message(message.chat.id, error_message)
                return
        finally:
            conn.close()
    else:
        word = arg

    url = f"https://api.dictionaryapi.dev/api/v2/entries/en/{word}"

    try:
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200:
            word_data = data[0]
            definition_message = f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ *{word_data['word']}*:"
            phonetic = word_data.get('phonetic')
            meanings = word_data['meanings']

            if phonetic:
                definition_message += f"\n\n–§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: {phonetic}"

            phonetics = word_data.get('phonetics')
            if phonetics:
                for phonetic_info in phonetics:
                    audio_url = phonetic_info.get('audio')
                    if audio_url:
                        bot.send_audio(message.chat.id, audio_url)

            for meaning in meanings:
                part_of_speech = meaning['partOfSpeech']
                definitions = meaning['definitions']
                definition_message += f"\n\n*{part_of_speech.capitalize()}*:"
                
                for idx, definition in enumerate(definitions, start=1):
                    definition_text = definition['definition']
                    definition_message += f"\n{idx}. {definition_text}"

                    if 'example' in definition:
                        example = definition['example']
                        definition_message += f"\n–ü—Ä–∏–º–µ—Ä: {example}"

                    if definition['synonyms']:
                        synonyms = ', '.join(definition['synonyms'])
                        definition_message += f"\n–°–∏–Ω–æ–Ω–∏–º—ã: {synonyms}"

                    if definition['antonyms']:
                        antonyms = ', '.join(definition['antonyms'])
                        definition_message += f"\n–ê–Ω—Ç–æ–Ω–∏–º—ã: {antonyms}"

            bot.send_message(message.chat.id, definition_message, parse_mode="Markdown")
        else:
            error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ \"{word}\". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            bot.send_message(message.chat.id, error_message)
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–≤–∞ \"{word}\". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        bot.send_message(message.chat.id, error_message)
        print(f"Error: {e}")

bot.polling()
